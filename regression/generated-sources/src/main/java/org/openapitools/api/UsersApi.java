/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Book;
import org.openapitools.model.CreateBookForUser404Response;
import org.openapitools.model.CreateBookForUserRequest;
import org.openapitools.model.CreateUser201Response;
import org.openapitools.model.CreateUserRequest;
import org.openapitools.model.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "users", description = "the users API")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /users/{userId}/books : Create a book for a user
     *
     * @param userId ID of the user to create a book for (required)
     * @param createBookForUserRequest  (required)
     * @return Book created successfully (status code 201)
     *         or User not found (status code 404)
     */
    @Operation(
        operationId = "createBookForUser",
        summary = "Create a book for a user",
        responses = {
            @ApiResponse(responseCode = "201", description = "Book created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Book.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateBookForUser404Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/{userId}/books",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Book> createBookForUser(
        @Parameter(name = "userId", description = "ID of the user to create a book for", required = true) @PathVariable("userId") Integer userId,
        @Parameter(name = "CreateBookForUserRequest", description = "", required = true) @Valid @RequestBody CreateBookForUserRequest createBookForUserRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"author\" : \"author\", \"id\" : 0, \"title\" : \"title\", \"userId\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /users : Create a user
     *
     * @param createUserRequest  (required)
     * @return User created successfully (status code 201)
     */
    @Operation(
        operationId = "createUser",
        summary = "Create a user",
        responses = {
            @ApiResponse(responseCode = "201", description = "User created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateUser201Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CreateUser201Response> createUser(
        @Parameter(name = "CreateUserRequest", description = "", required = true) @Valid @RequestBody CreateUserRequest createUserRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 0, \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /users/{userId}/books/{bookId} : Delete a book for a user
     *
     * @param userId ID of the user to delete a book from (required)
     * @param bookId ID of the book to delete (required)
     * @return Book deleted successfully (status code 204)
     */
    @Operation(
        operationId = "deleteBookForUser",
        summary = "Delete a book for a user",
        responses = {
            @ApiResponse(responseCode = "204", description = "Book deleted successfully")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{userId}/books/{bookId}"
    )
    default ResponseEntity<Void> deleteBookForUser(
        @Parameter(name = "userId", description = "ID of the user to delete a book from", required = true) @PathVariable("userId") Integer userId,
        @Parameter(name = "bookId", description = "ID of the book to delete", required = true) @PathVariable("bookId") Integer bookId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /users/{userId} : Delete a user
     *
     * @param userId ID of the user to delete (required)
     * @return User deleted successfully (status code 204)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "Delete a user",
        responses = {
            @ApiResponse(responseCode = "204", description = "User deleted successfully")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{userId}"
    )
    default ResponseEntity<Void> deleteUser(
        @Parameter(name = "userId", description = "ID of the user to delete", required = true) @PathVariable("userId") Integer userId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users/{userId}/books : Get all books for a user
     *
     * @param userId ID of the user to get books for (required)
     * @return List of books for the user (status code 200)
     */
    @Operation(
        operationId = "getBooksForUser",
        summary = "Get all books for a user",
        responses = {
            @ApiResponse(responseCode = "200", description = "List of books for the user", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Book.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{userId}/books",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Book>> getBooksForUser(
        @Parameter(name = "userId", description = "ID of the user to get books for", required = true) @PathVariable("userId") Integer userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"author\" : \"author\", \"id\" : 0, \"title\" : \"title\", \"userId\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /users : Get all users
     *
     * @return List of users (status code 200)
     */
    @Operation(
        operationId = "getUsers",
        summary = "Get all users",
        responses = {
            @ApiResponse(responseCode = "200", description = "List of users", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users",
        produces = { "application/json" }
    )
    default ResponseEntity<List<User>> getUsers(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 0, \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
